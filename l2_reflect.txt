Q:What happens when you initialize a repository? Why do you need to do it?
A:You create git repo that tracks changes. You need it to work with git control system.

Q:How is the staging area different from the working directory and the repository? What value do you think it offers?
A:Repository holds history of all commit versions. Working directory holds current commit. Staging area hold files that are required for commit.

Q:How can you use the staging area to make sure you have one commit per logical change?
A:You can check staging area with working directory to see what u change.

Q:What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A:When you want to test some new feature or add maybe another language localization to 
your code. Anyway when you want to test something new and not to touch your master
branch.

Q:How do the diagrams help you visualize the branch structure?
A:You can see all comits of the branch from the last to the first parent from which this
branch checked out.

Q:What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A:Two branches will be checked out to the first parent commit of them and then all new commits
will be added together.

Q:What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A:When there is no merge conflict in two commits, that is when commits dont change same
code, git can merge this commits automatically. But when commits operate on same fields, 
user must decide what commit should propagate.

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.

